package com.business.creditmarketloanapi.service;

import com.business.creditmarketloanapi.dto.LoanItemDTO;
import com.business.creditmarketloanapi.dto.LoanListResponseDTO;
import com.business.creditmarketloanapi.dto.LoanRequestDTO;
import com.business.creditmarketloanapi.dto.LoanResponseDTO;
import com.business.creditmarketloanapi.entity.Loan;
import com.business.creditmarketloanapi.entity.Parameter;
import com.business.creditmarketloanapi.entity.User;
import com.business.creditmarketloanapi.global.exceptions.AttributeException;
import com.business.creditmarketloanapi.global.exceptions.ResourceNotFoundException;
import com.business.creditmarketloanapi.global.utils.Constants;
import com.business.creditmarketloanapi.repository.LoanRepository;
import com.business.creditmarketloanapi.repository.ParameterRepository;
import com.business.creditmarketloanapi.repository.UserRepository;
import org.apache.commons.math3.util.Precision;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Service that implements loan request and consultation operations
 *
 * @author Julian Alvarado
 */
@Service
public class LoanServiceImpl implements LoanService {
    @Autowired
    private LoanRepository loanRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ParameterRepository parameterRepository;

    /**
     * Implements the process of validation, calculations and registration of a loan application
     *
     * @param loanRequestDTO DTO object with the loan application data
     * @return DTO response object with the identifier and monthly installment of the loan
     * @throws ResourceNotFoundException Exception generated by the validation of the user requesting the loan and the validation of the parameters required for the calculation of the installment
     * @throws AttributeException        Exception generated by the validation of the loan amount according to the maximum amount allowed by TARGET
     */
    @Override
    public LoanResponseDTO saveLoan(LoanRequestDTO loanRequestDTO) throws ResourceNotFoundException, AttributeException {
        Long userId = loanRequestDTO.getUser_id();
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User ID not found: " + userId));

        Long maxAmountByTargetId = user.getTarget().equals(Constants.NEW_TARGET) ? Constants.NEW_TARGET_MAX_AMOUNT_LOANS :
                user.getTarget().equals(Constants.FREQUENT_TARGET) ? Constants.FREQUENT_TARGET_MAX_AMOUNT_LOANS :
                        Constants.PREMIUM_TARGET_MAX_AMOUNT_LOANS;

        Parameter maxAmountByTargetParameter = parameterRepository.findById(maxAmountByTargetId)
                .orElseThrow(() -> new ResourceNotFoundException("Parameter not found: " + maxAmountByTargetId));
        Double maxAmountByTargetValue = Double.parseDouble(maxAmountByTargetParameter.getStrValue());

        if (loanRequestDTO.getAmount() > maxAmountByTargetValue) {
            throw new AttributeException("Amount cannot be greater than maximum amount: " + maxAmountByTargetValue);
        }

        Long targetRateId = user.getTarget().equals(Constants.NEW_TARGET) ? Constants.NEW_TARGET_RATE :
                user.getTarget().equals(Constants.FREQUENT_TARGET) ? Constants.FREQUENT_TARGET_RATE :
                        Constants.PREMIUM_TARGET_RATE;

        Parameter targetRateParameter = parameterRepository.findById(targetRateId)
                .orElseThrow(() -> new ResourceNotFoundException("Parameter not found: " + targetRateId));
        Double targetRateValue = Double.parseDouble(targetRateParameter.getStrValue());

        Double installment = Precision.round(calculateInstallment(targetRateValue,
                        loanRequestDTO.getTerm(),
                        loanRequestDTO.getAmount()),
                Constants.DECIMAL_NUMBER_SCALE);

        Loan loan = new Loan();
        loan.setAmount(loanRequestDTO.getAmount());
        loan.setTerm(loanRequestDTO.getTerm());
        loan.setRate(targetRateValue);
        loan.setInstallment(installment);
        loan.setUser(user);

        Loan newLoan = loanRepository.save(loan);
        LoanResponseDTO loanResponseDTO = new LoanResponseDTO(newLoan.getId(), newLoan.getInstallment());
        return loanResponseDTO;
    }

    /**
     * Implements the calculation of the value of the monthly installment of a loan
     *
     * @param rate   Loan interest rate
     * @param term   Loan term (En months)
     * @param amount Loan amount
     * @return The value of the monthly installment of a loan
     */
    @Override
    public Double calculateInstallment(Double rate, Integer term, Double amount) {
        Double r = rate / 12;
        return (r + (r / (Math.pow(1 + r, term) - 1))) * amount;
    }

    /**
     * Implements the search for loans requested by date. The output is paginated according to page number and size
     *
     * @param fromDate   Search start date (in yyyy-MM-dd format)
     * @param toDate     Search end date (in yyyy-MM-dd format)
     * @param pageNumber Number of results pages
     * @param pageSize   Result page size
     * @return DTO response object with the list of loans requested between fromDate and toDate and data from the pagination of the results
     */
    @Override
    public LoanListResponseDTO getLoanList(Date fromDate, Date toDate, int pageNumber, int pageSize) {
        Pageable pageable = PageRequest.of(pageNumber, pageSize);
        Page<Loan> loanPage = loanRepository.findByCreatedAtBetween(fromDate, toDate, pageable);
        List<Loan> loanList = loanPage.getContent();
        List<LoanItemDTO> loanItemDTOList = loanList.stream().map(loan -> convertLoanToDTO(loan)).collect(Collectors.toList());

        LoanListResponseDTO loanListResponseDTO = new LoanListResponseDTO();
        loanListResponseDTO.setLoanList(loanItemDTOList);
        loanListResponseDTO.setPageNo(loanPage.getNumber() + 1);
        loanListResponseDTO.setPageSize(loanPage.getSize());
        loanListResponseDTO.setTotalElements(loanPage.getTotalElements());
        loanListResponseDTO.setTotalPages(loanPage.getTotalPages());
        loanListResponseDTO.setIsLast(loanPage.isLast());

        return loanListResponseDTO;
    }

    /**
     * Converts Loan entity to Loan DTO object
     *
     * @param loan The loan entity
     * @return The loan DTO object
     */
    private LoanItemDTO convertLoanToDTO(Loan loan) {
        LoanItemDTO loanItemDTO = new LoanItemDTO();
        loanItemDTO.setId(loan.getId());
        loanItemDTO.setAmount(loan.getAmount());
        loanItemDTO.setTerm(loan.getTerm());
        loanItemDTO.setRate(loan.getRate());
        loanItemDTO.setUser_id(loan.getUser().getId());
        loanItemDTO.setTarget(loan.getUser().getTarget());
        loanItemDTO.setDate(loan.getCreatedAt());
        return loanItemDTO;
    }
}
