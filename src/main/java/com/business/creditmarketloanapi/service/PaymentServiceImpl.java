package com.business.creditmarketloanapi.service;

import com.business.creditmarketloanapi.dto.PaymentRequestDTO;
import com.business.creditmarketloanapi.dto.PaymentResponseDTO;
import com.business.creditmarketloanapi.entity.Loan;
import com.business.creditmarketloanapi.entity.Payment;
import com.business.creditmarketloanapi.global.exceptions.AttributeException;
import com.business.creditmarketloanapi.global.exceptions.ResourceNotFoundException;
import com.business.creditmarketloanapi.repository.LoanRepository;
import com.business.creditmarketloanapi.repository.PaymentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

/**
 * Service that implements payment request and consultation operations
 *
 * @author Julian Alvarado
 */
@Service
public class PaymentServiceImpl implements PaymentService {
    @Autowired
    private LoanRepository loanRepository;

    @Autowired
    private PaymentRepository paymentRepository;

    /**
     * Implements the process of validation, calculation and registration of a loan payment
     *
     * @param paymentRequestDTO DTO object with the payment data
     * @return DTO Response Object with payment ID, loan ID, and debt balance
     * @throws ResourceNotFoundException Exception generated by the validation of the loan to which the payment is made
     * @throws AttributeException        Exception generated by the validation of the debt amount
     */
    @Override
    public PaymentResponseDTO savePayment(PaymentRequestDTO paymentRequestDTO) throws ResourceNotFoundException, AttributeException {
        Long loanId = paymentRequestDTO.getLoan_id();
        Loan loan = loanRepository.findById(loanId)
                .orElseThrow(() -> new ResourceNotFoundException("Loan ID not found: " + loanId));
        Double totalDebt = getLoanDebt(loan);

        if (paymentRequestDTO.getAmount() > totalDebt) {
            throw new AttributeException("The payment amount cannot be greater than the loan debt");
        }

        Payment payment = new Payment();
        payment.setLoan(loan);
        payment.setAmount(paymentRequestDTO.getAmount());
        Payment newPayment = paymentRepository.save(payment);

        PaymentResponseDTO paymentResponseDTO = new PaymentResponseDTO(
                newPayment.getId(),
                newPayment.getLoan().getId(),
                getLoanDebt(loan)
        );
        return paymentResponseDTO;
    }

    /**
     * Implements the calculation of the value of the loan debt
     *
     * @param loan The loan to query
     * @return The amount of the debt
     */
    public Double getLoanDebt(Loan loan) {
        List<Payment> payments = paymentRepository.findByLoan(loan);
        Double totalAmountPaid = payments.stream()
                .map(payment -> payment.getAmount())
                .collect(Collectors.summingDouble(Double::doubleValue));

        return (loan.getAmount() - totalAmountPaid);
    }
}
