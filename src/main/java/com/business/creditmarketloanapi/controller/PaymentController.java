package com.business.creditmarketloanapi.controller;

import com.business.creditmarketloanapi.dto.PaymentRequestDTO;
import com.business.creditmarketloanapi.dto.ResponseDTO;
import com.business.creditmarketloanapi.global.exceptions.AttributeException;
import com.business.creditmarketloanapi.global.exceptions.ResourceNotFoundException;
import com.business.creditmarketloanapi.service.PaymentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Controller for requests related to payment operations
 *
 * @author Julian Alvarado
 */
@CrossOrigin
@Validated
@RestController
@RequestMapping("/api")
public class PaymentController {
    @Autowired
    private PaymentService paymentService;

    /**
     * Creates a loan payment
     *
     * @param paymentRequestDTO Body of the request with the data of the payment to register (request object DTO
     * @return HTTP response with status, payment ID, loan ID, and loan debt
     * @throws ResourceNotFoundException Exception generated by the validation of the loan to which the payment is made
     * @throws AttributeException        Exception generated by the validation of the debt amount
     */
    @PostMapping("/payment")
    public ResponseEntity<ResponseDTO> createPayment(@Valid @RequestBody PaymentRequestDTO paymentRequestDTO) throws ResourceNotFoundException, AttributeException {
        return ResponseEntity.ok(new ResponseDTO(HttpStatus.OK, paymentService.savePayment(paymentRequestDTO)));
    }

    /**
     * Gets loan debt, total debt and debt by target
     *
     * @param loanId The loan ID to query
     * @param target The user's target to query
     * @param date   The debt consultation date
     * @return HTTP response with debt balance
     * @throws ParseException            Exception generated by the query date conversion in the format received in the request
     * @throws ResourceNotFoundException Exception generated in the validation of the entered loan
     * @throws AttributeException        Exception generated in the validation of the user's target
     */
    @GetMapping("/debt")
    public ResponseEntity<ResponseDTO> getDebtBalance(@RequestParam(value = "loanId", defaultValue = "", required = false) Long loanId,
                                                      @RequestParam(value = "target", defaultValue = "", required = false) String target,
                                                      @RequestParam(value = "date") String date) throws ParseException, ResourceNotFoundException, AttributeException {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date toDate = dateFormat.parse(date + " 23:59:59");

        return ResponseEntity.ok(new ResponseDTO(HttpStatus.OK,
                paymentService.getLoanDebt(loanId, target, toDate)));
    }

}
